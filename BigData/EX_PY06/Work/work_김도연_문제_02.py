# ------------------------------------------------------------------ 
#  주말 과제, 문제은행 문제까지.
# 문제 은행 링크 : https://wikidocs.net/7021
# ------------------------------------------------------------------ 
"""
# 081 기본적으로 데이터 언패킹은 좌변의 변수와 우변 데이터 개수가 같아야 합니다.
# 하지만 star expression을 사용하면 변수의 개수가 달라도 데이터 언패킹을 할 수 있습니다.
# 튜플에 저장된 데이터 중에서 앞에 있는 두 개의 데이터만 필요할 경우 나머지 데이터의 언패킹 코드를 작성할 필요가 없습니다.
# >> a, b, *c = (0, 1, 2, 3, 4, 5)
# >> a
# 0
# >> b
# 1
# >> c
# [2, 3, 4, 5]
# 다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, start expression을 사용하여 좌측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
print("\n81번")
*valid_score, a, b = scores
print(valid_score)
# print(valid_score) 출력 결과 : [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5]


# 082 다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때,
# start expression을 사용하여 우측 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
print("\n82번")
a, b, *valid_score = scores
print(valid_score)
# print(valid_score) 출력 결과 : [8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]


# 083 다음과 같이 10개의 값이 저장된 scores 리스트가 있을 때, 
# start expression을 사용하여 가운데 있는 8개의 값을 valid_score 변수에 바인딩하여라.
scores = [8.8, 8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8, 9.4]
print("\n83번")
a,*valid_score, b = scores
print(valid_score)
# print(valid_score) 출력 결과 : [8.9, 8.7, 9.2, 9.3, 9.7, 9.9, 9.5, 7.8]


# 084 비어있는 딕셔너리
# temp 이름의 비어있는 딕셔너리를 만들라.
print("\n84번")
temp = {}
print(type(temp))


# 085 다음 아이스크림 이름과 희망 가격을 딕셔너리로 구성하라.
# 이름	희망 가격
# 메로나	1000
# 폴라포	1200
# 빵빠레	1800
print("\n85번")
temp = {"메로나":1000, "폴라포":1200, "빵빠레":1800}
print(temp)

# 086 085 번의 딕셔너리에 아래 아이스크림 가격정보를 추가하라.
# 이름	희망 가격
# 죠스바	1200
# 월드콘	1500
print("\n86번")
#01
temp.update({"죠스바":1200, "월드콘":1500})
#02
temp.update(죠스바=1200, 월드콘=1500)
print(temp)

"""

# 087 다음 딕셔너리를 사용하여 메로나 가격을 출력하라.

ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
# 실행 예:
# 메로나 가격: 1000
print("\n87번")
print(f"메로나 가격 : {ice['메로나']}")


# 088 다음 딕셔너리에서 메로나의 가격을 1300으로 수정하라.
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
print("\n88번") 
ice['메로나']=1100
print(ice)    # 연습1
ice.update(메로나=1200)
print(ice)    # 연습2
ice.update({"메로나":1300})
print(ice)    # 답


# 089 다음 딕셔너리에서 메로나를 삭제하라.
ice = {'메로나': 1000,
       '폴로포': 1200,
       '빵빠레': 1800,
       '죠스바': 1200,
       '월드콘': 1500}
print("\n89번")
del ice({"메로나":1000})
print(ice)

"""
# 090 다음 코드에서 에러가 발생한 원인을 설명하라.
# >> icecream = {'폴라포': 1200, '빵빠레': 1800, '월드콘': 1500, '메로나': 1000}
# >> icecream['누가바']
# Traceback (most recent call last):
#   File "<pyshell#69>", line 1, in <module>
#     icecream['누가바']
# KeyError: '누가바'
print("\n90번")

# 091
print("\n91번")

# 092
print("\n92번")

# 093
print("\n93번")

# 094
print("\n94번")

# 095
print("\n95번")

# 096
print("\n96번")

# 097
print("\n97번")

# 098
print("\n98번")

# 099
print("\n99번")

# 100
print("\n100번")

# 101
print("\n101번")

# 102
print("\n102번")

# 103
print("\n103번")

# 104
print("\n104번")

# 105
print("\n105번")

# 106
print("\n106번")

# 107
print("\n107번")

# 108
print("\n108번")

# 109
print("\n109번")

# 110
print("\n110번")

# 111
print("\n111번")

# 112
print("\n112번")

# 113
print("\n113번")

# 114
print("\n114번")

# 115
print("\n115번")

# 116
print("\n116번")

# 117
print("\n117번")

# 118
print("\n118번")

# 119
print("\n119번")

# 120
print("\n120번")

# 121
print("\n121번")

# 122
print("\n122번")

# 123
print("\n123번")

# 124
print("\n124번")

# 125
print("\n125번")

# 126
print("\n126번")

# 127
print("\n127번")

# 128
print("\n128번")

# 129
print("\n129번")

# 130
print("\n130번")

# 131
print("\n131번")

# 132
print("\n132번")

# 133
print("\n133번")

# 134
print("\n134번")

# 135
print("\n135번")

# 136
print("\n136번")

# 137
print("\n137번")

# 138
print("\n138번")

# 139
print("\n139번")

# 140
print("\n140번")

# 141
print("\n141번")

# 142
print("\n142번")

# 143
print("\n143번")

# 144
print("\n144번")

# 145
print("\n145번")

# 146
print("\n146번")

# 147
print("\n147번")

# 148
print("\n148번")

# 149
print("\n149번")

# 150
print("\n150번")

"""